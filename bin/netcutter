#!/usr/bin/env python

import sys
import os
import datetime
import argparse
from subprocess import call
import re
from os import access, R_OK
from os.path import isfile
from functools import wraps
from netcutter import utilities, jobs
from py2neo import Graph
import time


def main():
    cmdopts = utilities.get_options()
    utilities.print_start()
    utilities.check_dependencies()
    opts = utilities.read_config(cmdopts.config)
    opts['base_dir'] = os.path.dirname(os.path.abspath(__file__))
    opts['bin'] = os.path.join(opts['base_dir'], 'bin')
    opts['data'] = os.path.join(opts['base_dir'], 'data')
    utilities.print_opts(opts)
    utilities.check_opts(opts)

    # PREPARATION AND DOWNLOADS
    #jobs.download_interactions(opts)
    jobs.create_dirs(opts)
    
    # GRAPH ANALYSIS
    jobs.build_graph(opts)
    jobs.edges_2_csv(opts)
    jobs.nodes_2_csv(opts)
    #jobs.download_go(opts)
    opts['gene_ontology_file'] = os.path.join(opts['output'], 'GO', 'gene_ontologies.txt')
    jobs.go_to_csv(opts)
    jobs.shortest_paths_to_skeleton(opts)
    jobs.unique_shortest_path(opts)

    # NEO4j
    jobs.pull_neo4j_docker(opts)
    #jobs.start_neo4j_docker(opts)
    #graph = utilities.connect_to_neo4j(opts)
    #jobs.upload_neo4j_genes(opts, graph)
    #jobs.upload_neo4j_interactions(opts, graph)
    #jobs.upload_neo4j_go(opts, graph)
    jobs.upload_neo4j_shortestpaths(opts, graph)

    # Upload Gene Aliases to neo4j

    # Create :schema

    # Pull django docker

    # Run django docker

    # Create plots and tables




if __name__ == "__main__":
    main()

